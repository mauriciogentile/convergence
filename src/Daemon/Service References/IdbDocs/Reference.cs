//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Idb.Sec.Convergence.Daemon.IdbDocs {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx", ConfigurationName="IdbDocs.WSIDBDocsSoap")]
    public interface WSIDBDocsSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/AddEntryToLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AddEntryToLog(string DST, string docNum, string userID, string activityDesc, string refDocument, string refLibrary, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/AddEntryToLog", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AddEntryToLogAsync(string DST, string docNum, string userID, string activityDesc, string refDocument, string refLibrary, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/Search", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode Search(string DST, string ReturnProperties, string SearchCriteria, string Libraries);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/Search", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> SearchAsync(string DST, string ReturnProperties, string SearchCriteria, string Libraries);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/Search_ReturnString", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Search_ReturnString(string DST, string ReturnProperties, string SearchCriteria, string Libraries);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/Search_ReturnString", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Search_ReturnStringAsync(string DST, string ReturnProperties, string SearchCriteria, string Libraries);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/Login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Login(string UserId, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/Login", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LoginAsync(string UserId, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/WebLogin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string WebLogin(string sUserId, string sPassword, string sLoginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/WebLogin", ReplyAction="*")]
        System.Threading.Tasks.Task<string> WebLoginAsync(string sUserId, string sPassword, string sLoginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/GetDefaultLibrary", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDefaultLibrary();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/GetDefaultLibrary", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDefaultLibraryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/ExecuteSQLPassThrough", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ExecuteSQLPassThrough(string DST, string SQLSentence, string ResultTableName, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/ExecuteSQLPassThrough", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ExecuteSQLPassThroughAsync(string DST, string SQLSentence, string ResultTableName, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/TableLookUp", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet TableLookUp(string DST, string TableName, string ValueField, string DescriptionField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/TableLookUp", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> TableLookUpAsync(string DST, string TableName, string ValueField, string DescriptionField);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/EncryptString", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string EncryptString(string sClearText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/EncryptString", ReplyAction="*")]
        System.Threading.Tasks.Task<string> EncryptStringAsync(string sClearText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/GetAllProfileFields", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetAllProfileFields(string DST, string docNum, string FormName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/GetAllProfileFields", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetAllProfileFieldsAsync(string DST, string docNum, string FormName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/UserPermissions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool UserPermissions(string DocNum, string UserId, int AccessRightNeeded);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/UserPermissions", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> UserPermissionsAsync(string DocNum, string UserId, int AccessRightNeeded);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/UserPermissionsList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode UserPermissionsList(string DST, string DocNum, string UserId, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/UserPermissionsList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> UserPermissionsListAsync(string DST, string DocNum, string UserId, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/SetTrustees", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SetTrustees(string DST, string DocNum, string TrusteeList, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/SetTrustees", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SetTrusteesAsync(string DST, string DocNum, string TrusteeList, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/RemoveTrustees", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RemoveTrustees(string DST, string DocNum, string TrusteeList, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/RemoveTrustees", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RemoveTrusteesAsync(string DST, string DocNum, string TrusteeList, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/GetDocumentVersions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetDocumentVersions(string DST, string DocNum, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/GetDocumentVersions", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetDocumentVersionsAsync(string DST, string DocNum, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/RetriveDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode RetriveDocument(string DST, string VersionId, string DocNum, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/RetriveDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> RetriveDocumentAsync(string DST, string VersionId, string DocNum, string Library);
        
        // CODEGEN: Parameter 'GetBinaryDocumentResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/GetBinaryDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Idb.Sec.Convergence.Daemon.IdbDocs.GetBinaryDocumentResponse GetBinaryDocument(Idb.Sec.Convergence.Daemon.IdbDocs.GetBinaryDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/GetBinaryDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<Idb.Sec.Convergence.Daemon.IdbDocs.GetBinaryDocumentResponse> GetBinaryDocumentAsync(Idb.Sec.Convergence.Daemon.IdbDocs.GetBinaryDocumentRequest request);
        
        // CODEGEN: Parameter 'fileStream' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/CreateDocumentFromStream", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        Idb.Sec.Convergence.Daemon.IdbDocs.CreateDocumentFromStreamResponse CreateDocumentFromStream(Idb.Sec.Convergence.Daemon.IdbDocs.CreateDocumentFromStreamRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/CreateDocumentFromStream", ReplyAction="*")]
        System.Threading.Tasks.Task<Idb.Sec.Convergence.Daemon.IdbDocs.CreateDocumentFromStreamResponse> CreateDocumentFromStreamAsync(Idb.Sec.Convergence.Daemon.IdbDocs.CreateDocumentFromStreamRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/CreateDocumentFromFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode CreateDocumentFromFile(string DST, string Library, string FilenameUrl, string Criteria, string trusteeList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/CreateDocumentFromFile", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> CreateDocumentFromFileAsync(string DST, string Library, string FilenameUrl, string Criteria, string trusteeList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/CreateDocumentVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CreateDocumentVersion(string DST, string docNum, string authorId, string TYPIST, string Comments, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/CreateDocumentVersion", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CreateDocumentVersionAsync(string DST, string docNum, string authorId, string TYPIST, string Comments, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/CreatePaperProfile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode CreatePaperProfile(string DST, string Library, string Criteria, string trusteeList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/CreatePaperProfile", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> CreatePaperProfileAsync(string DST, string Library, string Criteria, string trusteeList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/UpdateProfile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode UpdateProfile(string DST, string DocNum, string NewCriteria, string Library, string FullDocURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/UpdateProfile", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> UpdateProfileAsync(string DST, string DocNum, string NewCriteria, string Library, string FullDocURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/DocumentCheckOut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode DocumentCheckOut(string DST, string DocNum, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/DocumentCheckOut", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> DocumentCheckOutAsync(string DST, string DocNum, string Library);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/DocumentCheckIn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode DocumentCheckIn(string DST, string Library, string FilenameUrl, string DocNum, string TYPIST, string comments, int CheckInMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/DocumentCheckIn", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> DocumentCheckInAsync(string DST, string Library, string FilenameUrl, string DocNum, string TYPIST, string comments, int CheckInMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/DeleteDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode DeleteDocument(string DST, string docNum, string versionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/DeleteDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> DeleteDocumentAsync(string DST, string docNum, string versionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/Version", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Version();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/Version", ReplyAction="*")]
        System.Threading.Tasks.Task<string> VersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/GetLibrariesAvailable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode GetLibrariesAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/GetLibrariesAvailable", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetLibrariesAvailableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/FolderCreate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode FolderCreate(string sDST, string sLibrary, string sCriteria, string sTrusteeList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/FolderCreate", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> FolderCreateAsync(string sDST, string sLibrary, string sCriteria, string sTrusteeList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/FolderDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode FolderDelete(string sDST, string sLibrary, string sFolderDocNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/FolderDelete", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> FolderDeleteAsync(string sDST, string sLibrary, string sFolderDocNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/FolderAddDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void FolderAddDocument(string sDST, string sLibrary, string sFolderDocNum, string sDocumentDocNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/FolderAddDocument", ReplyAction="*")]
        System.Threading.Tasks.Task FolderAddDocumentAsync(string sDST, string sLibrary, string sFolderDocNum, string sDocumentDocNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/FolderRemoveDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void FolderRemoveDocument(string sDST, string sLibrary, string sFolderDocNum, string sDocumentDocNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/FolderRemoveDocument", ReplyAction="*")]
        System.Threading.Tasks.Task FolderRemoveDocumentAsync(string sDST, string sLibrary, string sFolderDocNum, string sDocumentDocNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/FolderGetContents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Xml.XmlNode FolderGetContents(string sDST, string sLibrary, string sFolderDocNum, bool bRecursive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/FolderGetContents", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> FolderGetContentsAsync(string sDST, string sLibrary, string sFolderDocNum, bool bRecursive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/FolderSetTrustees", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string FolderSetTrustees(string sDST, string sLibrary, string sFolderDocNum, string sTrusteeList, bool bRecusive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/FolderSetTrustees", ReplyAction="*")]
        System.Threading.Tasks.Task<string> FolderSetTrusteesAsync(string sDST, string sLibrary, string sFolderDocNum, string sTrusteeList, bool bRecusive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/GetDocumentStream", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntityBase))]
        Idb.Sec.Convergence.Daemon.IdbDocs.IDBDocsStream GetDocumentStream(string sDST, string sDocNum, string sVersionId, string sLibrary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/GetDocumentStream", ReplyAction="*")]
        System.Threading.Tasks.Task<Idb.Sec.Convergence.Daemon.IdbDocs.IDBDocsStream> GetDocumentStreamAsync(string sDST, string sDocNum, string sVersionId, string sLibrary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/UpdateDocumentStream", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntityBase))]
        void UpdateDocumentStream(string sDST, string sDocNum, string sVersionId, string sLibrary, Idb.Sec.Convergence.Daemon.IdbDocs.IDBDocsStream strm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/UpdateDocumentStream", ReplyAction="*")]
        System.Threading.Tasks.Task UpdateDocumentStreamAsync(string sDST, string sDocNum, string sVersionId, string sLibrary, Idb.Sec.Convergence.Daemon.IdbDocs.IDBDocsStream strm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/QueryDB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntityBase))]
        System.Data.DataSet QueryDB(string sUserID, string sUserPassword, string sSQL, Idb.Sec.Convergence.Daemon.IdbDocs.DMDBSqlParamsSerializableField[] collDBParams, string sResultTableName, string sLibrary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/QueryDB", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> QueryDBAsync(string sUserID, string sUserPassword, string sSQL, Idb.Sec.Convergence.Daemon.IdbDocs.DMDBSqlParamsSerializableField[] collDBParams, string sResultTableName, string sLibrary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/LastContentUpdateTime", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntityBase))]
        System.DateTime LastContentUpdateTime(string sDST, string sDocNum, string sVersionSpec, string sLibrary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/LastContentUpdateTime", ReplyAction="*")]
        System.Threading.Tasks.Task<System.DateTime> LastContentUpdateTimeAsync(string sDST, string sDocNum, string sVersionSpec, string sLibrary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/PreventCCUpdatesOnDoc", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntityBase))]
        void PreventCCUpdatesOnDoc(string sDST, string sDocNum, bool boolPreventUpdates, string sLibrary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/PreventCCUpdatesOnDoc", ReplyAction="*")]
        System.Threading.Tasks.Task PreventCCUpdatesOnDocAsync(string sDST, string sDocNum, bool boolPreventUpdates, string sLibrary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/AuthorizeInternet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntityBase))]
        void AuthorizeInternet(string sResponsibleUID, string sResponsiblePassword, string sDocNum, string sLibrary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/AuthorizeInternet", ReplyAction="*")]
        System.Threading.Tasks.Task AuthorizeInternetAsync(string sResponsibleUID, string sResponsiblePassword, string sDocNum, string sLibrary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/UnauthorizeInternet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntityBase))]
        void UnauthorizeInternet(string sResponsibleUID, string sResponsiblePassword, string sDocNum, string sLibrary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/UnauthorizeInternet", ReplyAction="*")]
        System.Threading.Tasks.Task UnauthorizeInternetAsync(string sResponsibleUID, string sResponsiblePassword, string sDocNum, string sLibrary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/GetInternetPublicationInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntityBase))]
        System.Xml.XmlNode GetInternetPublicationInfo(string sDocNum, string sLibrary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/GetInternetPublicationInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Xml.XmlNode> GetInternetPublicationInfoAsync(string sDocNum, string sLibrary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/MakeRecord", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntityBase))]
        void MakeRecord(string sDST, string sDocNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/MakeRecord", ReplyAction="*")]
        System.Threading.Tasks.Task MakeRecordAsync(string sDST, string sDocNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/UnmakeRecord", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntityBase))]
        void UnmakeRecord(string sDST, string sDocNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/UnmakeRecord", ReplyAction="*")]
        System.Threading.Tasks.Task UnmakeRecordAsync(string sDST, string sDocNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/TermStoreCache", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(EntityBase))]
        string TermStoreCache();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx/TermStoreCache", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TermStoreCacheAsync();
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetBinaryDocument", WrapperNamespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx", IsWrapped=true)]
    public partial class GetBinaryDocumentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx", Order=0)]
        public string DST;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx", Order=1)]
        public string DocNum;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx", Order=2)]
        public string VersionId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx", Order=3)]
        public string Library;
        
        public GetBinaryDocumentRequest() {
        }
        
        public GetBinaryDocumentRequest(string DST, string DocNum, string VersionId, string Library) {
            this.DST = DST;
            this.DocNum = DocNum;
            this.VersionId = VersionId;
            this.Library = Library;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetBinaryDocumentResponse", WrapperNamespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx", IsWrapped=true)]
    public partial class GetBinaryDocumentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetBinaryDocumentResult;
        
        public GetBinaryDocumentResponse() {
        }
        
        public GetBinaryDocumentResponse(byte[] GetBinaryDocumentResult) {
            this.GetBinaryDocumentResult = GetBinaryDocumentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateDocumentFromStream", WrapperNamespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx", IsWrapped=true)]
    public partial class CreateDocumentFromStreamRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx", Order=0)]
        public string DST;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx", Order=1)]
        public string Library;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] fileStream;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx", Order=3)]
        public string Criteria;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx", Order=4)]
        public string trusteeList;
        
        public CreateDocumentFromStreamRequest() {
        }
        
        public CreateDocumentFromStreamRequest(string DST, string Library, byte[] fileStream, string Criteria, string trusteeList) {
            this.DST = DST;
            this.Library = Library;
            this.fileStream = fileStream;
            this.Criteria = Criteria;
            this.trusteeList = trusteeList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateDocumentFromStreamResponse", WrapperNamespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx", IsWrapped=true)]
    public partial class CreateDocumentFromStreamResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx", Order=0)]
        public System.Xml.XmlNode CreateDocumentFromStreamResult;
        
        public CreateDocumentFromStreamResponse() {
        }
        
        public CreateDocumentFromStreamResponse(System.Xml.XmlNode CreateDocumentFromStreamResult) {
            this.CreateDocumentFromStreamResult = CreateDocumentFromStreamResult;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx")]
    public partial class IDBDocsStream : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string fileNameField;
        
        private int sizeField;
        
        private byte[][] fileField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
                this.RaisePropertyChanged("fileName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
                this.RaisePropertyChanged("size");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("chunk", DataType="base64Binary", IsNullable=false)]
        public byte[][] file {
            get {
                return this.fileField;
            }
            set {
                this.fileField = value;
                this.RaisePropertyChanged("file");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DMDBSqlParamsSerializableField))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx")]
    public abstract partial class EntityBase : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://idbdocs.iadb.org/WSDocs/WSIDBDocs.asmx")]
    public partial class DMDBSqlParamsSerializableField : EntityBase {
        
        private string fieldNameField;
        
        private string fieldValueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string FieldName {
            get {
                return this.fieldNameField;
            }
            set {
                this.fieldNameField = value;
                this.RaisePropertyChanged("FieldName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string FieldValue {
            get {
                return this.fieldValueField;
            }
            set {
                this.fieldValueField = value;
                this.RaisePropertyChanged("FieldValue");
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WSIDBDocsSoapChannel : Idb.Sec.Convergence.Daemon.IdbDocs.WSIDBDocsSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WSIDBDocsSoapClient : System.ServiceModel.ClientBase<Idb.Sec.Convergence.Daemon.IdbDocs.WSIDBDocsSoap>, Idb.Sec.Convergence.Daemon.IdbDocs.WSIDBDocsSoap {
        
        public WSIDBDocsSoapClient() {
        }
        
        public WSIDBDocsSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WSIDBDocsSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WSIDBDocsSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WSIDBDocsSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddEntryToLog(string DST, string docNum, string userID, string activityDesc, string refDocument, string refLibrary, string Library) {
            return base.Channel.AddEntryToLog(DST, docNum, userID, activityDesc, refDocument, refLibrary, Library);
        }
        
        public System.Threading.Tasks.Task<bool> AddEntryToLogAsync(string DST, string docNum, string userID, string activityDesc, string refDocument, string refLibrary, string Library) {
            return base.Channel.AddEntryToLogAsync(DST, docNum, userID, activityDesc, refDocument, refLibrary, Library);
        }
        
        public System.Xml.XmlNode Search(string DST, string ReturnProperties, string SearchCriteria, string Libraries) {
            return base.Channel.Search(DST, ReturnProperties, SearchCriteria, Libraries);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> SearchAsync(string DST, string ReturnProperties, string SearchCriteria, string Libraries) {
            return base.Channel.SearchAsync(DST, ReturnProperties, SearchCriteria, Libraries);
        }
        
        public string Search_ReturnString(string DST, string ReturnProperties, string SearchCriteria, string Libraries) {
            return base.Channel.Search_ReturnString(DST, ReturnProperties, SearchCriteria, Libraries);
        }
        
        public System.Threading.Tasks.Task<string> Search_ReturnStringAsync(string DST, string ReturnProperties, string SearchCriteria, string Libraries) {
            return base.Channel.Search_ReturnStringAsync(DST, ReturnProperties, SearchCriteria, Libraries);
        }
        
        public string Login(string UserId, string Password) {
            return base.Channel.Login(UserId, Password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string UserId, string Password) {
            return base.Channel.LoginAsync(UserId, Password);
        }
        
        public string WebLogin(string sUserId, string sPassword, string sLoginID) {
            return base.Channel.WebLogin(sUserId, sPassword, sLoginID);
        }
        
        public System.Threading.Tasks.Task<string> WebLoginAsync(string sUserId, string sPassword, string sLoginID) {
            return base.Channel.WebLoginAsync(sUserId, sPassword, sLoginID);
        }
        
        public string GetDefaultLibrary() {
            return base.Channel.GetDefaultLibrary();
        }
        
        public System.Threading.Tasks.Task<string> GetDefaultLibraryAsync() {
            return base.Channel.GetDefaultLibraryAsync();
        }
        
        public System.Data.DataSet ExecuteSQLPassThrough(string DST, string SQLSentence, string ResultTableName, string Library) {
            return base.Channel.ExecuteSQLPassThrough(DST, SQLSentence, ResultTableName, Library);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ExecuteSQLPassThroughAsync(string DST, string SQLSentence, string ResultTableName, string Library) {
            return base.Channel.ExecuteSQLPassThroughAsync(DST, SQLSentence, ResultTableName, Library);
        }
        
        public System.Data.DataSet TableLookUp(string DST, string TableName, string ValueField, string DescriptionField) {
            return base.Channel.TableLookUp(DST, TableName, ValueField, DescriptionField);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> TableLookUpAsync(string DST, string TableName, string ValueField, string DescriptionField) {
            return base.Channel.TableLookUpAsync(DST, TableName, ValueField, DescriptionField);
        }
        
        public string EncryptString(string sClearText) {
            return base.Channel.EncryptString(sClearText);
        }
        
        public System.Threading.Tasks.Task<string> EncryptStringAsync(string sClearText) {
            return base.Channel.EncryptStringAsync(sClearText);
        }
        
        public System.Xml.XmlNode GetAllProfileFields(string DST, string docNum, string FormName) {
            return base.Channel.GetAllProfileFields(DST, docNum, FormName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetAllProfileFieldsAsync(string DST, string docNum, string FormName) {
            return base.Channel.GetAllProfileFieldsAsync(DST, docNum, FormName);
        }
        
        public bool UserPermissions(string DocNum, string UserId, int AccessRightNeeded) {
            return base.Channel.UserPermissions(DocNum, UserId, AccessRightNeeded);
        }
        
        public System.Threading.Tasks.Task<bool> UserPermissionsAsync(string DocNum, string UserId, int AccessRightNeeded) {
            return base.Channel.UserPermissionsAsync(DocNum, UserId, AccessRightNeeded);
        }
        
        public System.Xml.XmlNode UserPermissionsList(string DST, string DocNum, string UserId, string Library) {
            return base.Channel.UserPermissionsList(DST, DocNum, UserId, Library);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> UserPermissionsListAsync(string DST, string DocNum, string UserId, string Library) {
            return base.Channel.UserPermissionsListAsync(DST, DocNum, UserId, Library);
        }
        
        public string SetTrustees(string DST, string DocNum, string TrusteeList, string Library) {
            return base.Channel.SetTrustees(DST, DocNum, TrusteeList, Library);
        }
        
        public System.Threading.Tasks.Task<string> SetTrusteesAsync(string DST, string DocNum, string TrusteeList, string Library) {
            return base.Channel.SetTrusteesAsync(DST, DocNum, TrusteeList, Library);
        }
        
        public string RemoveTrustees(string DST, string DocNum, string TrusteeList, string Library) {
            return base.Channel.RemoveTrustees(DST, DocNum, TrusteeList, Library);
        }
        
        public System.Threading.Tasks.Task<string> RemoveTrusteesAsync(string DST, string DocNum, string TrusteeList, string Library) {
            return base.Channel.RemoveTrusteesAsync(DST, DocNum, TrusteeList, Library);
        }
        
        public System.Xml.XmlNode GetDocumentVersions(string DST, string DocNum, string Library) {
            return base.Channel.GetDocumentVersions(DST, DocNum, Library);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetDocumentVersionsAsync(string DST, string DocNum, string Library) {
            return base.Channel.GetDocumentVersionsAsync(DST, DocNum, Library);
        }
        
        public System.Xml.XmlNode RetriveDocument(string DST, string VersionId, string DocNum, string Library) {
            return base.Channel.RetriveDocument(DST, VersionId, DocNum, Library);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> RetriveDocumentAsync(string DST, string VersionId, string DocNum, string Library) {
            return base.Channel.RetriveDocumentAsync(DST, VersionId, DocNum, Library);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Idb.Sec.Convergence.Daemon.IdbDocs.GetBinaryDocumentResponse Idb.Sec.Convergence.Daemon.IdbDocs.WSIDBDocsSoap.GetBinaryDocument(Idb.Sec.Convergence.Daemon.IdbDocs.GetBinaryDocumentRequest request) {
            return base.Channel.GetBinaryDocument(request);
        }
        
        public byte[] GetBinaryDocument(string DST, string DocNum, string VersionId, string Library) {
            Idb.Sec.Convergence.Daemon.IdbDocs.GetBinaryDocumentRequest inValue = new Idb.Sec.Convergence.Daemon.IdbDocs.GetBinaryDocumentRequest();
            inValue.DST = DST;
            inValue.DocNum = DocNum;
            inValue.VersionId = VersionId;
            inValue.Library = Library;
            Idb.Sec.Convergence.Daemon.IdbDocs.GetBinaryDocumentResponse retVal = ((Idb.Sec.Convergence.Daemon.IdbDocs.WSIDBDocsSoap)(this)).GetBinaryDocument(inValue);
            return retVal.GetBinaryDocumentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Idb.Sec.Convergence.Daemon.IdbDocs.GetBinaryDocumentResponse> Idb.Sec.Convergence.Daemon.IdbDocs.WSIDBDocsSoap.GetBinaryDocumentAsync(Idb.Sec.Convergence.Daemon.IdbDocs.GetBinaryDocumentRequest request) {
            return base.Channel.GetBinaryDocumentAsync(request);
        }
        
        public System.Threading.Tasks.Task<Idb.Sec.Convergence.Daemon.IdbDocs.GetBinaryDocumentResponse> GetBinaryDocumentAsync(string DST, string DocNum, string VersionId, string Library) {
            Idb.Sec.Convergence.Daemon.IdbDocs.GetBinaryDocumentRequest inValue = new Idb.Sec.Convergence.Daemon.IdbDocs.GetBinaryDocumentRequest();
            inValue.DST = DST;
            inValue.DocNum = DocNum;
            inValue.VersionId = VersionId;
            inValue.Library = Library;
            return ((Idb.Sec.Convergence.Daemon.IdbDocs.WSIDBDocsSoap)(this)).GetBinaryDocumentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Idb.Sec.Convergence.Daemon.IdbDocs.CreateDocumentFromStreamResponse Idb.Sec.Convergence.Daemon.IdbDocs.WSIDBDocsSoap.CreateDocumentFromStream(Idb.Sec.Convergence.Daemon.IdbDocs.CreateDocumentFromStreamRequest request) {
            return base.Channel.CreateDocumentFromStream(request);
        }
        
        public System.Xml.XmlNode CreateDocumentFromStream(string DST, string Library, byte[] fileStream, string Criteria, string trusteeList) {
            Idb.Sec.Convergence.Daemon.IdbDocs.CreateDocumentFromStreamRequest inValue = new Idb.Sec.Convergence.Daemon.IdbDocs.CreateDocumentFromStreamRequest();
            inValue.DST = DST;
            inValue.Library = Library;
            inValue.fileStream = fileStream;
            inValue.Criteria = Criteria;
            inValue.trusteeList = trusteeList;
            Idb.Sec.Convergence.Daemon.IdbDocs.CreateDocumentFromStreamResponse retVal = ((Idb.Sec.Convergence.Daemon.IdbDocs.WSIDBDocsSoap)(this)).CreateDocumentFromStream(inValue);
            return retVal.CreateDocumentFromStreamResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Idb.Sec.Convergence.Daemon.IdbDocs.CreateDocumentFromStreamResponse> Idb.Sec.Convergence.Daemon.IdbDocs.WSIDBDocsSoap.CreateDocumentFromStreamAsync(Idb.Sec.Convergence.Daemon.IdbDocs.CreateDocumentFromStreamRequest request) {
            return base.Channel.CreateDocumentFromStreamAsync(request);
        }
        
        public System.Threading.Tasks.Task<Idb.Sec.Convergence.Daemon.IdbDocs.CreateDocumentFromStreamResponse> CreateDocumentFromStreamAsync(string DST, string Library, byte[] fileStream, string Criteria, string trusteeList) {
            Idb.Sec.Convergence.Daemon.IdbDocs.CreateDocumentFromStreamRequest inValue = new Idb.Sec.Convergence.Daemon.IdbDocs.CreateDocumentFromStreamRequest();
            inValue.DST = DST;
            inValue.Library = Library;
            inValue.fileStream = fileStream;
            inValue.Criteria = Criteria;
            inValue.trusteeList = trusteeList;
            return ((Idb.Sec.Convergence.Daemon.IdbDocs.WSIDBDocsSoap)(this)).CreateDocumentFromStreamAsync(inValue);
        }
        
        public System.Xml.XmlNode CreateDocumentFromFile(string DST, string Library, string FilenameUrl, string Criteria, string trusteeList) {
            return base.Channel.CreateDocumentFromFile(DST, Library, FilenameUrl, Criteria, trusteeList);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> CreateDocumentFromFileAsync(string DST, string Library, string FilenameUrl, string Criteria, string trusteeList) {
            return base.Channel.CreateDocumentFromFileAsync(DST, Library, FilenameUrl, Criteria, trusteeList);
        }
        
        public string CreateDocumentVersion(string DST, string docNum, string authorId, string TYPIST, string Comments, string Library) {
            return base.Channel.CreateDocumentVersion(DST, docNum, authorId, TYPIST, Comments, Library);
        }
        
        public System.Threading.Tasks.Task<string> CreateDocumentVersionAsync(string DST, string docNum, string authorId, string TYPIST, string Comments, string Library) {
            return base.Channel.CreateDocumentVersionAsync(DST, docNum, authorId, TYPIST, Comments, Library);
        }
        
        public System.Xml.XmlNode CreatePaperProfile(string DST, string Library, string Criteria, string trusteeList) {
            return base.Channel.CreatePaperProfile(DST, Library, Criteria, trusteeList);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> CreatePaperProfileAsync(string DST, string Library, string Criteria, string trusteeList) {
            return base.Channel.CreatePaperProfileAsync(DST, Library, Criteria, trusteeList);
        }
        
        public System.Xml.XmlNode UpdateProfile(string DST, string DocNum, string NewCriteria, string Library, string FullDocURL) {
            return base.Channel.UpdateProfile(DST, DocNum, NewCriteria, Library, FullDocURL);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> UpdateProfileAsync(string DST, string DocNum, string NewCriteria, string Library, string FullDocURL) {
            return base.Channel.UpdateProfileAsync(DST, DocNum, NewCriteria, Library, FullDocURL);
        }
        
        public System.Xml.XmlNode DocumentCheckOut(string DST, string DocNum, string Library) {
            return base.Channel.DocumentCheckOut(DST, DocNum, Library);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> DocumentCheckOutAsync(string DST, string DocNum, string Library) {
            return base.Channel.DocumentCheckOutAsync(DST, DocNum, Library);
        }
        
        public System.Xml.XmlNode DocumentCheckIn(string DST, string Library, string FilenameUrl, string DocNum, string TYPIST, string comments, int CheckInMode) {
            return base.Channel.DocumentCheckIn(DST, Library, FilenameUrl, DocNum, TYPIST, comments, CheckInMode);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> DocumentCheckInAsync(string DST, string Library, string FilenameUrl, string DocNum, string TYPIST, string comments, int CheckInMode) {
            return base.Channel.DocumentCheckInAsync(DST, Library, FilenameUrl, DocNum, TYPIST, comments, CheckInMode);
        }
        
        public System.Xml.XmlNode DeleteDocument(string DST, string docNum, string versionId) {
            return base.Channel.DeleteDocument(DST, docNum, versionId);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> DeleteDocumentAsync(string DST, string docNum, string versionId) {
            return base.Channel.DeleteDocumentAsync(DST, docNum, versionId);
        }
        
        public string Version() {
            return base.Channel.Version();
        }
        
        public System.Threading.Tasks.Task<string> VersionAsync() {
            return base.Channel.VersionAsync();
        }
        
        public System.Xml.XmlNode GetLibrariesAvailable() {
            return base.Channel.GetLibrariesAvailable();
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetLibrariesAvailableAsync() {
            return base.Channel.GetLibrariesAvailableAsync();
        }
        
        public System.Xml.XmlNode FolderCreate(string sDST, string sLibrary, string sCriteria, string sTrusteeList) {
            return base.Channel.FolderCreate(sDST, sLibrary, sCriteria, sTrusteeList);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> FolderCreateAsync(string sDST, string sLibrary, string sCriteria, string sTrusteeList) {
            return base.Channel.FolderCreateAsync(sDST, sLibrary, sCriteria, sTrusteeList);
        }
        
        public System.Xml.XmlNode FolderDelete(string sDST, string sLibrary, string sFolderDocNum) {
            return base.Channel.FolderDelete(sDST, sLibrary, sFolderDocNum);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> FolderDeleteAsync(string sDST, string sLibrary, string sFolderDocNum) {
            return base.Channel.FolderDeleteAsync(sDST, sLibrary, sFolderDocNum);
        }
        
        public void FolderAddDocument(string sDST, string sLibrary, string sFolderDocNum, string sDocumentDocNum) {
            base.Channel.FolderAddDocument(sDST, sLibrary, sFolderDocNum, sDocumentDocNum);
        }
        
        public System.Threading.Tasks.Task FolderAddDocumentAsync(string sDST, string sLibrary, string sFolderDocNum, string sDocumentDocNum) {
            return base.Channel.FolderAddDocumentAsync(sDST, sLibrary, sFolderDocNum, sDocumentDocNum);
        }
        
        public void FolderRemoveDocument(string sDST, string sLibrary, string sFolderDocNum, string sDocumentDocNum) {
            base.Channel.FolderRemoveDocument(sDST, sLibrary, sFolderDocNum, sDocumentDocNum);
        }
        
        public System.Threading.Tasks.Task FolderRemoveDocumentAsync(string sDST, string sLibrary, string sFolderDocNum, string sDocumentDocNum) {
            return base.Channel.FolderRemoveDocumentAsync(sDST, sLibrary, sFolderDocNum, sDocumentDocNum);
        }
        
        public System.Xml.XmlNode FolderGetContents(string sDST, string sLibrary, string sFolderDocNum, bool bRecursive) {
            return base.Channel.FolderGetContents(sDST, sLibrary, sFolderDocNum, bRecursive);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> FolderGetContentsAsync(string sDST, string sLibrary, string sFolderDocNum, bool bRecursive) {
            return base.Channel.FolderGetContentsAsync(sDST, sLibrary, sFolderDocNum, bRecursive);
        }
        
        public string FolderSetTrustees(string sDST, string sLibrary, string sFolderDocNum, string sTrusteeList, bool bRecusive) {
            return base.Channel.FolderSetTrustees(sDST, sLibrary, sFolderDocNum, sTrusteeList, bRecusive);
        }
        
        public System.Threading.Tasks.Task<string> FolderSetTrusteesAsync(string sDST, string sLibrary, string sFolderDocNum, string sTrusteeList, bool bRecusive) {
            return base.Channel.FolderSetTrusteesAsync(sDST, sLibrary, sFolderDocNum, sTrusteeList, bRecusive);
        }
        
        public Idb.Sec.Convergence.Daemon.IdbDocs.IDBDocsStream GetDocumentStream(string sDST, string sDocNum, string sVersionId, string sLibrary) {
            return base.Channel.GetDocumentStream(sDST, sDocNum, sVersionId, sLibrary);
        }
        
        public System.Threading.Tasks.Task<Idb.Sec.Convergence.Daemon.IdbDocs.IDBDocsStream> GetDocumentStreamAsync(string sDST, string sDocNum, string sVersionId, string sLibrary) {
            return base.Channel.GetDocumentStreamAsync(sDST, sDocNum, sVersionId, sLibrary);
        }
        
        public void UpdateDocumentStream(string sDST, string sDocNum, string sVersionId, string sLibrary, Idb.Sec.Convergence.Daemon.IdbDocs.IDBDocsStream strm) {
            base.Channel.UpdateDocumentStream(sDST, sDocNum, sVersionId, sLibrary, strm);
        }
        
        public System.Threading.Tasks.Task UpdateDocumentStreamAsync(string sDST, string sDocNum, string sVersionId, string sLibrary, Idb.Sec.Convergence.Daemon.IdbDocs.IDBDocsStream strm) {
            return base.Channel.UpdateDocumentStreamAsync(sDST, sDocNum, sVersionId, sLibrary, strm);
        }
        
        public System.Data.DataSet QueryDB(string sUserID, string sUserPassword, string sSQL, Idb.Sec.Convergence.Daemon.IdbDocs.DMDBSqlParamsSerializableField[] collDBParams, string sResultTableName, string sLibrary) {
            return base.Channel.QueryDB(sUserID, sUserPassword, sSQL, collDBParams, sResultTableName, sLibrary);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> QueryDBAsync(string sUserID, string sUserPassword, string sSQL, Idb.Sec.Convergence.Daemon.IdbDocs.DMDBSqlParamsSerializableField[] collDBParams, string sResultTableName, string sLibrary) {
            return base.Channel.QueryDBAsync(sUserID, sUserPassword, sSQL, collDBParams, sResultTableName, sLibrary);
        }
        
        public System.DateTime LastContentUpdateTime(string sDST, string sDocNum, string sVersionSpec, string sLibrary) {
            return base.Channel.LastContentUpdateTime(sDST, sDocNum, sVersionSpec, sLibrary);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> LastContentUpdateTimeAsync(string sDST, string sDocNum, string sVersionSpec, string sLibrary) {
            return base.Channel.LastContentUpdateTimeAsync(sDST, sDocNum, sVersionSpec, sLibrary);
        }
        
        public void PreventCCUpdatesOnDoc(string sDST, string sDocNum, bool boolPreventUpdates, string sLibrary) {
            base.Channel.PreventCCUpdatesOnDoc(sDST, sDocNum, boolPreventUpdates, sLibrary);
        }
        
        public System.Threading.Tasks.Task PreventCCUpdatesOnDocAsync(string sDST, string sDocNum, bool boolPreventUpdates, string sLibrary) {
            return base.Channel.PreventCCUpdatesOnDocAsync(sDST, sDocNum, boolPreventUpdates, sLibrary);
        }
        
        public void AuthorizeInternet(string sResponsibleUID, string sResponsiblePassword, string sDocNum, string sLibrary) {
            base.Channel.AuthorizeInternet(sResponsibleUID, sResponsiblePassword, sDocNum, sLibrary);
        }
        
        public System.Threading.Tasks.Task AuthorizeInternetAsync(string sResponsibleUID, string sResponsiblePassword, string sDocNum, string sLibrary) {
            return base.Channel.AuthorizeInternetAsync(sResponsibleUID, sResponsiblePassword, sDocNum, sLibrary);
        }
        
        public void UnauthorizeInternet(string sResponsibleUID, string sResponsiblePassword, string sDocNum, string sLibrary) {
            base.Channel.UnauthorizeInternet(sResponsibleUID, sResponsiblePassword, sDocNum, sLibrary);
        }
        
        public System.Threading.Tasks.Task UnauthorizeInternetAsync(string sResponsibleUID, string sResponsiblePassword, string sDocNum, string sLibrary) {
            return base.Channel.UnauthorizeInternetAsync(sResponsibleUID, sResponsiblePassword, sDocNum, sLibrary);
        }
        
        public System.Xml.XmlNode GetInternetPublicationInfo(string sDocNum, string sLibrary) {
            return base.Channel.GetInternetPublicationInfo(sDocNum, sLibrary);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> GetInternetPublicationInfoAsync(string sDocNum, string sLibrary) {
            return base.Channel.GetInternetPublicationInfoAsync(sDocNum, sLibrary);
        }
        
        public void MakeRecord(string sDST, string sDocNum) {
            base.Channel.MakeRecord(sDST, sDocNum);
        }
        
        public System.Threading.Tasks.Task MakeRecordAsync(string sDST, string sDocNum) {
            return base.Channel.MakeRecordAsync(sDST, sDocNum);
        }
        
        public void UnmakeRecord(string sDST, string sDocNum) {
            base.Channel.UnmakeRecord(sDST, sDocNum);
        }
        
        public System.Threading.Tasks.Task UnmakeRecordAsync(string sDST, string sDocNum) {
            return base.Channel.UnmakeRecordAsync(sDST, sDocNum);
        }
        
        public string TermStoreCache() {
            return base.Channel.TermStoreCache();
        }
        
        public System.Threading.Tasks.Task<string> TermStoreCacheAsync() {
            return base.Channel.TermStoreCacheAsync();
        }
    }
}
